openapi: 3.0.0
info:
    description: "This is the REST 'contract' for the Order System"
    version: 1.0.0
    title: "(20F) Group Project - Order System"
    contact:
        name: "(20F) CST 8277"
        email: "normanm@algonquincollege.com"
        url: "https://brightspace.algonquincollege.com/d2l/home/279461"
servers:
    -
        url: "http://localhost:{port}/{contextRoot}/{basePath}"
        variables:
            port: {
                default: "8080"
            }
            contextRoot: {
                default: "rest-orderSystem"
            }
            basePath: {
                default: "api/v1"
            }

security:
    -
        basicAuth: []

components:
    securitySchemes:
        basicAuth:
            type: http
            scheme: basic

    parameters:
        idPathParam:
            in: path
            name: id
            required: true
            schema: {
                type: integer,
                format: int64,
                description: "a resource's id",
                example: 1
            }

    responses:
        ForbiddenError:
            description: "Access to the specified resource has been forbidden"
        UnauthorizedAdminError:
            description: "request requires HTTP authentication for ADMIN_ROLE"
        UnauthorizedUserError:
            description: "request requires HTTP authentication for USER_ROLE"
        NotFound:
            description: "The specified resource was not found"

    schemas:
        PojoBase:
            type: object
            required: [id, version]
            properties: {
                id: {
                    description: "id of entity",
                    type: integer
                },
                version: {
                    description: "version (OptLock) of entity",
                    type: integer
                },
                createdDate: {
                    description: "creation timestamp of entity",
                    type: string,
                    format: date-time
                    },
                updatedDate: {
                    description: "last-updatd timestamp of entity",
                    type: string,
                    format: date-time
                }
            }

        Customer:
            description: "(20F) Group Project - Customer entity"
            type: object
            allOf: [{
                $ref: "#/components/schemas/PojoBase"
            }]
            properties: {
                firstName: {type: string, description: "First Name of the customer", example: John},
                lastName: {type: string, description: "Last Name of the customer", example: Doe},
                email: {type: string, description: "Email of the customer", example: John.Doe@gmail.com},
                phoneNumber: {type: string, description: "Phone # of the customer", example: '+1.613.555.1212'},
                billingAddress: {$ref: '#/components/schemas/BillingAddress'},
                shippingAddress: {$ref: '#/components/schemas/ShippingAddress'}
            }
        CustomersList:
            description: "list of customers"
            type: array
            items: {
                $ref: "#/components/schemas/Customer"
            }

        Address:
            description: "(20W) Group Project - Address entity"
            discriminator:
              propertyName: type
            required: [type]
            type: object
            allOf: [{
                $ref: "#/components/schemas/PojoBase"
            }]
            properties: {
                street: {type: string, description: "Location of Address (street)", example: "1385 Woodroffe Avenue"},
                city: {type: string, description: "Location of Address (city)", example: "Ottawa"},
                state: {type: string, description: "Location of Address (State/Province)", example: "ON"},
                country: {type: string, description: "Location of Address (country)", example: "Canada"},
                postal: {type: string, description: "Postal Code", example: "K2G 1V8"}
            }
        AddressList:
            description: "list of addresses"
            type: array
            items: {
                $ref: "#/components/schemas/Address"
            }
        BillingAddress:
            allOf: [{
                $ref: "#/components/schemas/Address"  # BillingAddress has all properties of Address
            }]
            properties: { # extra properties only for BillingAddress
                type: {type: string, decription: "type of address", example: "B"},
                alsoShipping: {type: boolean, description: "indicates that this BillingAddress is also the customer's ShippingAddress"}
            }
        ShippingAddress:
            allOf: [{
                $ref: "#/components/schemas/Address"  # ShippingAddress has all properties of Address
            }]
            properties: { # extra properties only for BillingAddress
                type: {type: string, decription: "type of address", example: "S"},                
            }
        Order:
            description: "(20W) Group Project - Order entity"
            discriminator:
              propertyName: type
            required: [type]
            type: object
            allOf: [{
                $ref: "#/components/schemas/PojoBase"
            }]
            properties: {
                description: {type: string, description: "Description of Order", example: "Order ABC"},
                owningCustomer: {$ref: '#/components/schemas/Customer'}
            }
        OrderLine:
            description: "(20W) Group Project - OrderLine entity"
            discriminator:
              propertyName: type
            required: [type]
            type: object
            properties: {
                amount: {type: number, description: "Amount", example: 1000.00},
                owningOrder: {$ref: '#/components/schemas/Order'},
                product: {$ref: '#/components/schemas/Product'}
            }
        OrdersList:
            description: "list of orders"
            type: array
            items: {
                $ref: "#/components/schemas/Order"
            }                             
        Product:
            description: "(20W) Group Project - Product entity"
            discriminator:
              propertyName: type
            required: [type]
            type: object
            allOf: [{
                $ref: "#/components/schemas/PojoBase"
            }]
            properties: {
                description: {type: string, description: "Description of Product", example: "Charging Battery"},
                serialNo: {type: string, description: "Serial Number of Product", example: "12345"},
            }
        ProductsList:
            description: "list of products"
            type: array
            items: {
                $ref: "#/components/schemas/Product"
            }            
        Store:
            description: "(20W) Group Project - Product entity"
            discriminator:
              propertyName: type
            required: [type]
            type: object
            allOf: [{
                $ref: "#/components/schemas/PojoBase"
            }]
            properties: {
                storeName: {type: string, description: "Name of store", example: "Best Buy"}
            }
        StoresList:
            description: "list of stores"
            type: array
            items: {
                $ref: "#/components/schemas/Store"
            }  

paths:
    /customer:
        get:
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/CustomersList"
                            }
                        }
                    }
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedAdminError"
                }
            }

        post:
            requestBody: {
                description: "new customer to be added to Db",
                required: true,
                content: {
                    application/json: {
                        schema: {
                            $ref: "#/components/schemas/Customer"
                        }
                    }
                }
            }
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/CustomersList"
                            }
                        }
                    }
                }
            }

    /customer/{id}:
        get:
            summary: "Retrieves a customer by its id"
            parameters: [{
                $ref: "#/components/parameters/idPathParam"
            }]
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/Customer"
                            }
                        }
                    }
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedUserError"
                },
                "403": {
                    $ref: "#/components/responses/ForbiddenError"
                },
                "404": {
                    $ref: "#/components/responses/NotFound"
                }
            }
        put:
            summary: "Updates a customer by its id"
            parameters: [{
                $ref: "#/components/parameters/idPathParam"
            }]
            requestBody: {
                description: "Customer updated to Database",
                required: true,
                content: {
                    application/json: {
                        schema: {
                            $ref: "#/components/schemas/Customer"
                        }
                    }
                }
            }
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/CustomersList"
                            }
                        }
                    }
                }
            }
        delete:
            summary: "Removes a customer by its id"
            parameters: [{
                $ref: "#/components/parameters/idPathParam"
            }]
            responses: {
                "204": {
                    description: "Ok (No content, successful operation)"
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedUserError"
                },
                "403": {
                    $ref: "#/components/responses/ForbiddenError"
                },
                "404": {
                    $ref: "#/components/responses/NotFound"
                }
            }
   
    /customer/{id}/order:
        post:
            parameters: [{
                $ref: "#/components/parameters/idPathParam"
            }]
            requestBody: {
                description: "new orders for customer to be added to Database",
                required: true,
                content: {
                    application/json: {
                        schema: {
                            $ref: "#/components/schemas/Order"
                        }
                    }
                }
            }
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/Order"
                            }
                        }
                    }
                }
            }  
        get:
            summary: "Retrieves orders by its customer id"
            parameters: [{
                $ref: "#/components/parameters/idPathParam"
            }]
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/OrdersList"
                            }
                        }
                    }
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedUserError"
                },
                "403": {
                    $ref: "#/components/responses/ForbiddenError"
                },
                "404": {
                    $ref: "#/components/responses/NotFound"
                }
            }    
        put:
            summary: "Updates a order by its customer id"
            parameters: [{
                $ref: "#/components/parameters/idPathParam"
            }]
            requestBody: {
                description: "Order updated to Database",
                required: true,
                content: {
                    application/json: {
                        schema: {
                            $ref: "#/components/schemas/OrderLine"
                        }
                    }
                }
            }
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/Order"
                            }
                        }
                    }
                }
            } 
        delete:
            summary: "Removes a orders"
            parameters: [{
                $ref: "#/components/parameters/idPathParam"
            }]
            responses: {
                "204": {
                    description: "Ok (No content, successful operation)"
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedUserError"
                },
                "403": {
                    $ref: "#/components/responses/ForbiddenError"
                },
                "404": {
                    $ref: "#/components/responses/NotFound"
                }
            }               
    /product:
        get:
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/ProductsList"
                            }
                        }
                    }
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedAdminError"
                }
            }
            
        post:
            requestBody: {
                description: "new products to be added to Database",
                required: true,
                content: {
                    application/json: {
                        schema: {
                            $ref: "#/components/schemas/Product"
                        }
                    }
                }
            }
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/ProductsList"
                            }
                        }
                    }
                }
            }      
        
    /product/{id}:
    
        get:
            summary: "Retrieves a product by its id"
            parameters: [{
                $ref: "#/components/parameters/idPathParam"
            }]
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    required: true,
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/Product"
                            }
                        }
                    }
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedUserError"
                },
                "403": {
                    $ref: "#/components/responses/ForbiddenError"
                },
                "404": {
                    $ref: "#/components/responses/NotFound"
                }
            }
            
        put:
            summary: "Updates a product by its id"
            parameters: [{
                $ref: "#/components/parameters/idPathParam"
            }]
            requestBody: {
                description: "product updated to Database",
                required: true,
                content: {
                    application/json: {
                        schema: {
                            $ref: "#/components/schemas/Product"
                        }
                    }
                }
            }
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/ProductsList"
                            }
                        }
                    }
                }
            } 
                  
        delete:
            summary: "Removes a product by its id"
            parameters: [{
                $ref: "#/components/parameters/idPathParam"
            }]
            responses: {
                "204": {
                    description: "Ok (No content, successful operation)"
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedUserError"
                },
                "403": {
                    $ref: "#/components/responses/ForbiddenError"
                },
                "404": {
                    $ref: "#/components/responses/NotFound"
                }
            }            

    /store:
        get:
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/Store"
                            }
                        }
                    }
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedAdminError"
                }
            }
        post:
            requestBody: {

                description: "new store to be added to Db",
                required: true,                  

                content: {
                    application/json: {
                        schema: {
                            $ref: "#/components/schemas/Store"
                        }
                    }
                }
            }
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/StoresList"
                            }
                        }
                    }
                }
            }              

    /store/{id}:
        get:
            summary: "Retrieves a store by its id"
            parameters: [{
                $ref: "#/components/parameters/idPathParam"
            }]
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/Store"
                            }
                        }
                    }
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedUserError"
                },
                "403": {
                    $ref: "#/components/responses/ForbiddenError"
                },
                "404": {
                    $ref: "#/components/responses/NotFound"
                }
            }
            
        put:
            summary: "Updates a store by its id"
            parameters: [{
                $ref: "#/components/parameters/idPathParam"
            }]
            requestBody: {
                description: "store updated to Database",
                required: true,
                content: {
                    application/json: {
                        schema: {
                            $ref: "#/components/schemas/Store"
                        }
                    }
                }
            }
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/StoresList"
                            }
                        }
                    }
                }
            }     
            
        delete:
            summary: "Removes a store by its id"
            parameters: [{
                $ref: "#/components/parameters/idPathParam"
            }]
            responses: {
                "204": {
                    description: "Ok (No content, successful operation)"
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedUserError"
                },
                "403": {
                    $ref: "#/components/responses/ForbiddenError"
                },
                "404": {
                    $ref: "#/components/responses/NotFound"
                }
            }

            
    /customer/{id}/address:
        get:
            parameters: [{
                $ref: "#/components/parameters/idPathParam"
            }]        
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/ShippingAddress"
                            }
                        }
                    }
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedAdminError"
                }
            }
        post:
            summary: "Add address by its id"
            parameters: [{
                $ref: "#/components/parameters/idPathParam"
            }]
            requestBody: {
                description: "new address to be added to Db",
                required: true, 
                content: {
                    application/json: {
                        schema: {
                            $ref: "#/components/schemas/ShippingAddress"
                        }
                    }
                }
            }
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/AddressList"
                            }
                        }
                    }
                }
            }
        delete:
            summary: "Removes an address"
            parameters: [{
                $ref: "#/components/parameters/idPathParam"
            }]
            responses: {
                "204": {
                    description: "Ok (No content, successful operation)"
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedUserError"
                },
                "403": {
                    $ref: "#/components/responses/ForbiddenError"
                },
                "404": {
                    $ref: "#/components/responses/NotFound"
                }
            }            
        put:
            summary: "Updates an address by its id"
            parameters: [{
                $ref: "#/components/parameters/idPathParam"
            }]
            requestBody: {
                description: "address updated to Database",
                required: true,
                content: {
                    application/json: {
                        schema: {
                            $ref: "#/components/schemas/ShippingAddress"
                        }
                    }
                }
            }
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/AddressList"
                            }
                        }
                    }
                }
            }                
    /customer/{id}/address/{id}:
        get:
            summary: "Retrieves a address by its id"
            parameters: [{
                $ref: "#/components/parameters/idPathParam"
            }]
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/Address"
                            }
                        }
                    }
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedUserError"
                },
                "403": {
                    $ref: "#/components/responses/ForbiddenError"
                },
                "404": {
                    $ref: "#/components/responses/NotFound"
                }
            }
            
        put:
            summary: "Updates an address by its id"
            parameters: [{
                $ref: "#/components/parameters/idPathParam"
            }]
            requestBody: {
                description: "address updated to Database",
                required: true,
                content: {
                    application/json: {
                        schema: {
                            $ref: "#/components/schemas/Address"
                        }
                    }
                }
            }
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/AddressList"
                            }
                        }
                    }
                }
            }     
            
        delete:
            summary: "Removes an address by its id"
            parameters: [{
                $ref: "#/components/parameters/idPathParam"
            }]
            responses: {
                "204": {
                    description: "Ok (No content, successful operation)"
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedUserError"
                },
                "403": {
                    $ref: "#/components/responses/ForbiddenError"
                },
                "404": {
                    $ref: "#/components/responses/NotFound"
                }
            }

        
            
            